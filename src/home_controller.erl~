%%
%% Sample default "/" controller, implement this to your needs
%%
-module(home_controller,[Env]).
-include_lib("eunit/include/eunit.hrl").
-include("../deps/message_box/src/message.hrl").
-include("../deps/message_box/src/user.hrl").
-export([handle_request/2,before_filter/0]).
-define(MsgGetCount, 40).

handle_request("index",[]) ->
    Name = beepbeep_args:get_session_data("name", Env),
    TimelineRecords = message_box_rpc:call(get_home_timeline, 
					   [Name, ?MsgGetCount]),
    Timeline = parse_timeline(TimelineRecords),
    {render,"home/show.html",[{name,Name}, {timeline, Timeline}]};

handle_request("create", []) ->
    Name = beepbeep_args:get_param("name",Env),
    Text = beepbeep_args:get_param("text",Env),
    OTPassword = message_box_web:get_one_time_password(Env),
    Result = message_box_rpc:call(send_message, [Name, OTPassword, Text]),

    case Result of
	{ok, _MessageId} -> beepbeep_args:flash({notice,"Message Saved."}, Env);
	Other -> io:format("error: ~p~n", [Other])
    end,
    {redirect, "/home"}.

%%
%% @doc private functions
%%
parse_timeline(RecordList) ->
    parse_timeline(RecordList, []).

parse_timeline(RecordList, Results) ->
    case RecordList of
	[] -> lists:reverse(Results);
	[Message | Tail] ->
            User = Message#message.user,
	    Msg = [{id, Message#message.id}, {text, Message#message.text},
                   {user_name, atom_to_list(User#user.name)}, 
                   {user_id, User#user.id}],
	    parse_timeline(Tail, [Msg | Results])
    end.

before_filter() ->
    FilterOnly = ["index", "create"],
    case lists:member(beepbeep_args:get_action(Env),FilterOnly) of
	true ->
	    message_box_web:check_logged_in(Env);
	false ->
	    error_logger:info_report("Not Doing filter~n"),
	    ok
    end.

    
